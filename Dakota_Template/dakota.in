environment
  graphics
  tabular_data ## output variable and objective function values to dakota_tabular.dat

variables
	continuous_design = 3
  	  initial_point    1.9          0.00         0.00
  	  lower_bounds     1.4          0.00         0.00
  	  upper_bounds     2.3          12.0         12.0
  	  descriptors   'DAKOTA_RC' 'DAKOTA_EP_1' 'DAKOTA_EP_2'

## You should have reasonable guesses for the lower and upper bounds of the variables
## Otherwise, algorithm may converge very slowly
## For single elements, a wide range of values may be tested
## However, for binaries (hence many variables), you should use a more narrow range
## Initial estimates may be taken from previously optimized values of constituent elements

method
        moga
        max_iterations = 100 ## Dakota will stop if 100 generations reached (defaults)
        population_size = 50 ## Default number of chromosomes per generation, works well enough, but further optimization may be possible
        max_function_evaluations = 5000 ## Default, max number of chromosomes tested
        initialization_type unique_random ## Default, creates first generation randomly such that each chomosome is unqiue, works best
        crossover_type
          multi_point_parameterized_binary = 2  ## This method works best; 2-point crossover performed
          crossover_rate = 0.6 ## Probability of crossover being performed to generate offspring; this value has been optimized (roughly, work in progress)
        mutation_type replace_uniform  ## Randomly replace variables by mutations (no preference) at given rate below
          mutation_rate = 0.1 ## Keep low to avoid many unwanted chromosomes w/ errors; # mutations = 10% * population size * number of variables
        fitness_type domination_count
        replacement_type below_limit = 6
          shrinkage_fraction = 0.2  ## Small fraction works best, optimum value may depend on how suitable your initial value ranges are
        convergence_type metric_tracker ## Test convergence of objective functions (metric given by largest change in any objective function)
          percent_change = 0.05 num_generations = 10 ## Convergence acheived if less than 5% change occurs over ten consecutive generations (default)
        output verbose ## Write details to log

interface
        asynchronous 
          evaluation_concurrency = 2 ## Keep this low to prevent overusage of CPU
        system
          analysis_driver = '$SCHRODINGER/run /scr/szymansk/gaopaw/analysis.py $PWD' ## In each work directory, run analysis.py
          parameters_file = 'params.in' ## In each work directory, write values of variables to params.in 
          results_file    = 'results.out' ## In each work directory, write values of objective functions
        work_directory directory_tag 
          named 'workdir_pp' file_save directory_save ## Name of working directories, will be numbered 1, 2, 3, ... (all are saved)

responses
	num_objective_functions = 3 ## Set this accordingly based on your calculation
	no_gradients ## No gradients needed for genetic algorithm
        no_hessians ## No hessians needed for genetic algorithm
