environment
  graphics
  tabular_data

variables
	continuous_design = 32
  	  initial_point    1.579  1.088  1.010  1.501  1.662  1.779  1.599  10.849  2.421  2.209  1.991  1.900  1.995  2.237  2.091  1.917  1.983  1.341  
  	  lower_bounds     1.479  0.988  0.910  1.401  1.562  1.679  1.499  9.8490  1.921  2.109  1.891  1.800  1.895  2.137  1.991  1.817  1.883  0.841  
  	  upper_bounds     1.679  1.188  1.110  1.601  1.762  1.879  1.699  11.849  2.921  2.309  2.091  2.000  2.095  2.337  2.191  2.017  2.083  1.841  
  	  descriptors   'DAKOTA_Cl_RC_1' 'DAKOTA_Cl_RC_2' 'DAKOTA_Cl_RC_3' 'DAKOTA_Cl_RC_4' 'DAKOTA_Cl_RC_5' 'DAKOTA_Cl_RC_6' 'DAKOTA_Cl_RC_7' 'DAKOTA_Cl_EP_1' 'DAKOTA_Cl_EP_2' 'DAKOTA_K_RC_1' 'DAKOTA_K_RC_2' 'DAKOTA_K_RC_3' 'DAKOTA_K_RC_4' 'DAKOTA_K_RC_5' 'DAKOTA_K_RC_6' 'DAKOTA_K_RC_7' 'DAKOTA_K_RC_8' 'DAKOTA_K_EP_1' 'DAKOTA_Na_RC_1' 'DAKOTA_Na_RC_2' 'DAKOTA_Na_RC_3' 'DAKOTA_Na_RC_4' 'DAKOTA_Na_RC_5' 'DAKOTA_Na_RC_6' 'DAKOTA_Na_RC_7' 'DAKOTA_Mg_RC_1' 'DAKOTA_Mg_RC_2' 'DAKOTA_Mg_RC_3' 'DAKOTA_Mg_RC_4' 'DAKOTA_Mg_RC_5' 'DAKOTA_Mg_RC_6' 'DAKOTA_Mg_RC_7'

## You should have reasonable guesses for the lower and upper bounds of the variables
## Otherwise, algorithm may converge slowly or diverge completely

method
        moga ## Multi-Objective Genetic Algorithm
        max_iterations = 100 ## Dakota will stop if 100 generations reached (defaults)
        population_size = 400 ## 400 chromosomes in the initial generation, default = 50, larger No. needed if bad initial guesses (wide ranges of variables)
        max_function_evaluations = 5000 ## Default, max number of chromosomes tested
        initialization_type unique_random ## Default, creates first generation randomly such that each chomosome is unqiue, works best
        crossover_type ## How is crossover of parents performed to generate offspring
          multi_point_parameterized_binary = 2  ## This method works best; 2-point crossover performed
          crossover_rate = 0.4 ## Probability of crossover being performed to generate offspring; this value has been optimized (roughly)
        mutation_type offset_normal ## Select mutations based on Gaussian distribution around parent values, works slightly better than random mutation
          mutation_scale = 0.05 ## Standard deviation of mutation equal to 5% the range of the variable, works well, further optimization may be possible
          mutation_rate = 0.25  ## No. of mutations = 10% * population size * number of variables (each generation), low rate works well
        fitness_type domination_count ## Determine which designs to keep based on number of other designs which dominate it (default)
        replacement_type below_limit = 6 ## Only keep designs which are dominated by fewer than 6 other designs, default value, works well
          shrinkage_fraction = 0.25  ## Next generation must be at least 20% the size of the previous generation, small values work best here
        convergence_type metric_tracker ## Test convergence of objective functions (metric given by largest change in any objective function)
          percent_change = 1 num_generations = 10 ## Convergence acheived if less than 1% change occurs over ten consecutive generations (default)
        final_solutions = 10 ## Give 10 best solutions once run finishes, optimum value may depend on your problem, how many local minima exist
        output verbose ## Write details to log

interface
        asynchronous 
          evaluation_concurrency = 1 ## Keep this low to prevent overusage of CPU
        system
          analysis_driver = '$SCHRODINGER/run /home/szymansk/Optimization_Sets/analysis.py $PWD' ## In each work directory, run analysis.py
          parameters_file = 'params.in' ## In each work directory, write values of variables to params.in 
          results_file    = 'results.out' ## In each work directory, write values of objective functions
        work_directory directory_tag 
          named 'workdir_pp'

responses
        num_objective_functions = 18 ## Set this accordingly based on your calculation
        no_gradients ## No gradients needed for genetic algorithm
        no_hessians ## No hessians needed for genetic algorithm

