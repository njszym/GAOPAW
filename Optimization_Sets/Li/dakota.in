environment
  graphics
  tabular_data ## output variable and objective function values to dakota_tabular.dat

variables
	continuous_design = 50
  	  initial_point    1.693  1.478  1.378  1.560  1.300  1.504  1.697  1.508  2.539  1.337  1.356  1.276  1.151  1.348  1.324  1.421  1.481  3.710  1.723
  	  lower_bounds     1.593  1.378  1.278  1.460  1.200  1.404  1.597  1.408  2.039  0.837  1.256  1.176  1.051  1.248  1.224  1.321  1.381  3.210  1.223
  	  upper_bounds     1.793  1.578  1.478  1.660  1.400  1.604  1.797  1.608  3.039  1.837  1.456  1.376  1.251  1.448  1.424  1.521  1.581  4.210  2.223
  	  descriptors     'DAKOTA_Li_RC_1' 'DAKOTA_Li_RC_2' 'DAKOTA_Li_RC_3' 'DAKOTA_Li_RC_4' 'DAKOTA_Li_RC_5' 'DAKOTA_Li_RC_6' 'DAKOTA_Li_RC_7' 'DAKOTA_Li_RC_8' 'DAKOTA_Li_EP_1' 'DAKOTA_Li_EP_2' 'DAKOTA_F_RC_1' 'DAKOTA_F_RC_2' 'DAKOTA_F_RC_3' 'DAKOTA_F_RC_4' 'DAKOTA_F_RC_5' 'DAKOTA_F_RC_6' 'DAKOTA_F_RC_7' 'DAKOTA_F_EP_1' 'DAKOTA_F_EP_2' 'DAKOTA_Br_RC_1' 'DAKOTA_Br_RC_2' 'DAKOTA_Br_RC_3' 'DAKOTA_Br_RC_4' 'DAKOTA_Br_RC_5' 'DAKOTA_Br_RC_6' 'DAKOTA_Br_RC_7' 'DAKOTA_Br_EP_1' 'DAKOTA_Br_EP_2' 'DAKOTA_Al_RC_1' 'DAKOTA_Al_RC_2' 'DAKOTA_Al_RC_3' 'DAKOTA_Al_RC_4' 'DAKOTA_Al_RC_5' 'DAKOTA_Al_RC_6' 'DAKOTA_Al_RC_7' 'DAKOTA_Al_EP_1' 'DAKOTA_Al_EP_2' 'DAKOTA_Ge_RC_1' 'DAKOTA_Ge_RC_2' 'DAKOTA_Ge_RC_3' 'DAKOTA_Ge_RC_4' 'DAKOTA_Ge_RC_5' 'DAKOTA_Ge_RC_6' 'DAKOTA_Ge_RC_7' 'DAKOTA_Ge_RC_8' 'DAKOTA_Ge_RC_9' 'DAKOTA_Ge_EP_1' 'DAKOTA_Ge_EP_2' 'DAKOTA_Ge_EP_3'

## You should have reasonable guesses for the lower and upper bounds of the variables
## Otherwise, algorithm may converge very slowly
## For single elements, a wide range of values may be tested and algorithm should converge at a reasonable rate
## However, for binaries (hence many variables), you should use a more narrow range
## Initial estimates may be taken from previously optimized values of constituent elements

method
        moga ## Multi-Objective Genetic Algorithm
        max_iterations = 100 ## Dakota will stop if 100 generations reached (defaults)
        population_size = 250 ## 250 chromosomes in the initial generation, default = 50, larger No. needed if bad initial guesses (wide ranges of variables)
        max_function_evaluations = 5000 ## Default, max number of chromosomes tested
        initialization_type unique_random ## Default, creates first generation randomly such that each chomosome is unqiue, works best
        crossover_type ## How is crossover of parents performed to generate offspring
          multi_point_parameterized_binary = 2  ## This method works best; 2-point crossover performed
          crossover_rate = 0.4 ## Probability of crossover being performed to generate offspring; this value has been optimized (roughly)
        mutation_type offset_normal ## Select mutations based on Gaussian distribution around parent values, works slightly better than random mutation
          mutation_scale = 0.05 ## Standard deviation of mutation equal to 5% the range of the variable, works well, further optimization may be possible
          mutation_rate = 0.2  ## No. of mutations = 10% * population size * number of variables (each generation), low rate works well
        fitness_type domination_count ## Determine which designs to keep based on number of other designs which dominate it (default)
        replacement_type below_limit = 6 ## Only keep designs which are dominated by fewer than 6 other designs, default value, works well
          shrinkage_fraction = 0.30  ## Next generation must be at least 30% the size of the previous generation, small values work best here
        convergence_type metric_tracker ## Test convergence of objective functions (metric given by largest change in any objective function)
          percent_change = 1 num_generations = 10 ## Convergence acheived if less than 1% change occurs over ten consecutive generations (default)
        final_solutions = 10 ## Give 10 best solutions once run finishes, optimum value may depend on your problem, how many local minima exist
        output verbose ## Write details to log

interface
        asynchronous 
          evaluation_concurrency = 1 ## Keep this low to prevent overusage of CPU
        system
          analysis_driver = '$SCHRODINGER/run /home/szymansk/Optimization_Sets/analysis.py $PWD' ## In each work directory, run analysis.py
          parameters_file = 'params.in' ## In each work directory, write values of variables to params.in 
          results_file    = 'results.out' ## In each work directory, write values of objective functions
        work_directory directory_tag 
          named 'workdir_pp'

responses
	num_objective_functions = 20 ## Set this accordingly based on your calculation
	no_gradients ## No gradients needed for genetic algorithm
        no_hessians ## No hessians needed for genetic algorithm
